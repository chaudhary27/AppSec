fuction check_word(string word, hashmap hashtable[])
{
    Set int bucket to the output of hash_function(word).
    Set hashmap_t cursor equal to hashmap[bucket].
    While cursor is not NULL:
        If word equals cursor->word:
            return True.
        Set curosr to cursor->next.
    Set int bucket to the output of hash_function(word).
    Set hashmap_t cursor equal to hashmap[bucket].
    While cursor is  not NULL:
        If lower_case(word) equals curosr->word:
            return True.
        Set curosr to cursor->next.
    return False.
}

function load_dictionary(string dictionary, hashmap hashtable[])
{
    Initialize all values in hash table to NULL. [DONE]
    Open dict_file from path stored in dictionary.
    If dict_file is NULL:
        return false.
    While word in dict_file is not EOF (end of file):
        Set hashmap_t new_node to a new node.
        Set new_node->next to NULL.
        Set new_node->word equal to word.
        Set int bucket to hash_function(word).
        if hashtable[bucket] is NULL:
            Set hashtable[bucket] to new_node.
        else:
            Set new_node->next to hashtable[bucket].
            Set hashtable[bucket] to new_node.
    Close dict_file.
}

function check_words(file fp, hashmap hashtable[], string misspelled[])
{
    Set int num_misspelled to 0.
    While line in fp is not EOF (end of file):
        Read the line.
        Split the line on spaces.
        For each word in line:
            Remove punctuation from beginning and end of word.
            If not check_word(word):
                Append word to misspelled.
                Increment num_misspelled.
    Return num_misspelled.
}

checking single word entries (0.0/2.0)
Test Failed: [Errno 2] No such file or directory: './a.out': './a.out'
checking for non-English word. (0.0/1.0)

checking longer strings (0.0/2.0)

Checking for a buffer overflow in the dictionary file. (0.0/5.0)

checking for buffer overflow in the input file. (0.0/5.0)

checking a file with multiple lines. (0.0/2.0)

checking a word with punctuation in the middle. (0.0/3.0)